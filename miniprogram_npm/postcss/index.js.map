{"version":3,"sources":["postcss.js","css-syntax-error.js","terminal-highlight.js","tokenize.js","declaration.js","node.js","stringifier.js","symbols.js","stringify.js","lazy-result.js","map-generator.js","warn-once.js","result.js","warning.js","parse.js","container.js","comment.js","parser.js","at-rule.js","root.js","rule.js","list.js","input.js","previous-map.js","processor.js","fromJSON.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,AGTA,AJYA,AENA,ACHA;AFOA,AGTA,AJYA,AENA,ACHA;AFOA,AGTA,AJYA,AENA,ACHA;AFOA,AGTA,ACHA,ALeA,AENA,ACHA;AFOA,AGTA,ACHA,ALeA,AENA,ACHA;AFOA,AGTA,ACHA,ALeA,AENA,ACHA;AFOA,AGTA,ACHA,ALeA,AMlBA,AJYA,ACHA;AFOA,AGTA,ACHA,ALeA,AMlBA,AJYA,ACHA;AFOA,AGTA,ACHA,ALeA,AMlBA,AJYA,ACHA;AFOA,AGTA,ACHA,ALeA,AMlBA,ACHA,ALeA,ACHA;AFOA,AGTA,ACHA,ALeA,AMlBA,ACHA,ALeA,ACHA;AFOA,AGTA,ACHA,ALeA,AMlBA,ACHA,ALeA,ACHA;AFOA,AGTA,ACHA,ALeA,AMlBA,AENA,ADGA,ALeA,ACHA;AFOA,AGTA,ACHA,ALeA,AMlBA,AENA,ANkBA,ACHA;AFOA,AGTA,ACHA,ALeA,AMlBA,AENA,ANkBA,ACHA;AFOA,AGTA,AKfA,AJYA,ALeA,AMlBA,AENA,ANkBA,ACHA;AFOA,AGTA,AKfA,AJYA,ALeA,AMlBA,AENA,ANkBA,ACHA;AFOA,AGTA,AKfA,AJYA,ALeA,AMlBA,AENA,ANkBA,ACHA;AFOA,AGTA,AKfA,ACHA,ALeA,ALeA,AMlBA,AENA,ANkBA,ACHA;AFOA,AGTA,AKfA,ACHA,ALeA,ALeA,AMlBA,AENA,ANkBA,ACHA;AFOA,AGTA,AKfA,ACHA,ALeA,ALeA,AMlBA,AENA,ANkBA,ACHA;AFOA,AGTA,AKfA,ACHA,ALeA,ALeA,AMlBA,AENA,ANkBA,ACHA,AQxBA;AV+BA,AGTA,AKfA,ACHA,ALeA,ALeA,AMlBA,AENA,ANkBA,ACHA,AQxBA;AV+BA,AGTA,AKfA,ACHA,ALeA,ALeA,AMlBA,AENA,ANkBA,ACHA,AQxBA;AV+BA,AGTA,AKfA,ACHA,ALeA,ALeA,AYpCA,ANkBA,AJYA,ACHA,AQxBA;AV+BA,AQxBA,ACHA,ALeA,ALeA,AYpCA,ANkBA,AJYA,ACHA,AQxBA;AV+BA,AQxBA,ACHA,ALeA,ALeA,AYpCA,ANkBA,AJYA,ACHA,AQxBA;AV+BA,AQxBA,ACHA,ALeA,ALeA,AYpCA,ANkBA,AJYA,ACHA,AQxBA,AENA;AZqCA,AQxBA,ACHA,ALeA,ALeA,AYpCA,ANkBA,AJYA,ACHA,AQxBA,AENA;AZqCA,AQxBA,ACHA,ALeA,ALeA,AYpCA,ANkBA,AJYA,ACHA,AQxBA,AENA;AZqCA,AQxBA,ACHA,ALeA,AS3BA,Ad0CA,AYpCA,ANkBA,AJYA,ACHA,AQxBA,AENA;AZqCA,AQxBA,ACHA,ALeA,AS3BA,Ad0CA,AYpCA,ANkBA,AJYA,ACHA,AQxBA,AENA;AZqCA,AQxBA,ACHA,ALeA,AS3BA,Ad0CA,AYpCA,ANkBA,AJYA,ACHA,AQxBA,AENA;AELA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,Ad0CA,AYpCA,ANkBA,AJYA,ACHA,AQxBA,AENA;AELA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,Ad0CA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AELA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,Ad0CA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AGRA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,Ad0CA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AGRA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,Ad0CA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AGRA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,Ad0CA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AGRA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AGRA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AGRA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AKdA,AFMA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AKdA,AFMA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AKdA,AFMA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,ANkBA,AJYA,ACHA,AU9BA;AKdA,AFMA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,AbuCA,AJYA,ACHA,AU9BA;AKdA,AFMA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,AbuCA,AJYA,ACHA,AU9BA;AKdA,AFMA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,AbuCA,AJYA,ACHA,AU9BA;AKdA,AFMA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AFMA,ADGA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AQxBA,ACHA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AQxBA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AQxBA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AQxBA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AqB/DA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AqB/DA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AqB/DA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AYpCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AqB/DA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,AXiCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AqB/DA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,AXiCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AqB/DA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,AXiCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AqB/DA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,AZoCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AqB/DA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,AZoCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AqB/DA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,AZoCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA,AU9BA;AKdA,AHSA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,AZoCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA;Ae5CA,AHSA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,AZoCA,AOrBA,ACHA,Ad0CA,AJYA,ACHA;Ae5CA,AHSA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,AZoCA,AOrBA,ACHA,Ad0CA,AHSA;Ae5CA,AHSA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,AZoCA,AOrBA,ACHA,Ad0CA,AHSA;Ae5CA,AHSA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,ALeA,ACHA,Ad0CA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,ALeA,ACHA,Ad0CA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,ALeA,ACHA,Ad0CA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,ALeA,ACHA,Ad0CA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,ALeA,ACHA,Ad0CA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AS3BA,AGTA,AjBmDA,AuBrEA,ACHA,ALeA,ACHA,Ad0CA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AjBmDA,AuBrEA,ACHA,ALeA,ACHA,Ad0CA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AjBmDA,AuBrEA,ACHA,ALeA,ACHA,Ad0CA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AjBmDA,AuBrEA,ACHA,ALeA,ACHA,Ad0CA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AjBmDA,AuBrEA,ACHA,ALeA,AbuCA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AjBmDA,AuBrEA,ACHA,ALeA,AbuCA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AjBmDA,AuBrEA,ACHA,ALeA,AbuCA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AjBmDA,AuBrEA,ACHA,ALeA,AbuCA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AjBmDA,AuBrEA,ACHA,ALeA,AbuCA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,Ad0CA,AwBxEA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,ALeA,AbuCA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,AYpCA,AXiCA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AU9BA,AHSA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,ACHA,AlBsDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AMlBA,AjBmDA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,AOrBA,AbuCA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA,AHSA;AYnCA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,ACHA,ALeA,AYpCA,AXiCA;AS1BA,ANkBA,AJYA,AYpCA,AXiCA;AS1BA,ANkBA,AJYA,AYpCA,AXiCA;AS1BA,ANkBA,AJYA,AYpCA,AXiCA;AS1BA,ANkBA,AJYA,AYpCA,AXiCA;AS1BA,ANkBA,AJYA,AYpCA,AXiCA;AS1BA,ANkBA,AJYA,AYpCA,AXiCA;AS1BA,ANkBA,AJYA,AYpCA,AXiCA;AS1BA,ANkBA,AJYA,AYpCA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA,AXiCA;AS1BA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;AFOA,ANkBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;ARyBA,AQxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss (...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin (name, initializer) {\n  if (console && console.warn) {\n    console.warn(\n      name +\n        ': postcss.plugin was deprecated. Migration guide:\\n' +\n        'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n    )\n    if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n      // istanbul ignore next\n      console.warn(\n        name +\n          ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n          'https://www.w3ctech.com/topic/2226'\n      )\n    }\n  }\n  function creator (...args) {\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get () {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n","\n\nlet { red, bold, gray, options: colorette } = require('colorette')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor (message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      this.line = line\n      this.column = column\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage () {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode (color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = colorette.enabled\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString () {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n","\n\nlet { cyan, gray, green, yellow, magenta } = require('colorette')\n\nlet tokenizer = require('./tokenize')\n\nlet Input\n\nfunction registerInput (dependant) {\n  Input = dependant\n}\n\nconst HIGHLIGHT_THEME = {\n  'brackets': cyan,\n  'at-word': cyan,\n  'comment': gray,\n  'string': green,\n  'class': yellow,\n  'hash': magenta,\n  'call': cyan,\n  '(': cyan,\n  ')': cyan,\n  '{': yellow,\n  '}': yellow,\n  '[': yellow,\n  ']': yellow,\n  ':': yellow,\n  ';': yellow\n}\n\nfunction getTokenType ([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight (css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1]\n        .split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nterminalHighlight.registerInput = registerInput\n\nmodule.exports = terminalHighlight\n","\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer (input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position () {\n    return pos\n  }\n\n  function unclosed (what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile () {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken (opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back (token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n","\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor (defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable () {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n","\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet { isClean } = require('./symbols')\nlet stringify = require('./stringify')\n\nfunction cloneNode (obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      // istanbul ignore next\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor (defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error (message, opts = {}) {\n    if (this.source) {\n      let pos = this.positionBy(opts)\n      return this.source.input.error(message, pos.line, pos.column, opts)\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn (result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove () {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString (stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  clone (overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore (overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter (overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith (...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next () {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev () {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before (add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after (add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root () {\n    let result = this\n    while (result.parent) result = result.parent\n    return result\n  }\n\n  raw (prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws (keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON (_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        // istanbul ignore next\n        continue\n      }\n      if (name === 'parent') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside (index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy (opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  getProxyProcessor () {\n    return {\n      set (node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get (node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy () {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError (error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty () {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf () {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n","\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize (str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor (builder) {\n    this.builder = builder\n  }\n\n  stringify (node, semicolon) {\n    /* istanbul ignore if */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    this[node.type](node, semicolon)\n  }\n\n  root (node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment (node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl (node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule (node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule (node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body (node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block (node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw (node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    // Hack for first rule in CSS\n    if (detect === 'before') {\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent (root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment (root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl (root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen (root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon (root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter (node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue (node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\n","\n\nmodule.exports.isClean = Symbol('isClean')\n","\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify (node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n","\n\nlet MapGenerator = require('./map-generator')\nlet { isClean } = require('./symbols')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise (obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents (node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack (node) {\n  let events\n  if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks (node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor (processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (typeof css === 'object' && css !== null && css.type === 'root') {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'LazyResult'\n  }\n\n  get processor () {\n    return this.result.processor\n  }\n\n  get opts () {\n    return this.result.opts\n  }\n\n  get css () {\n    return this.stringify().css\n  }\n\n  get content () {\n    return this.stringify().content\n  }\n\n  get map () {\n    return this.stringify().map\n  }\n\n  get root () {\n    return this.sync().root\n  }\n\n  get messages () {\n    return this.sync().messages\n  }\n\n  warnings () {\n    return this.sync().warnings()\n  }\n\n  toString () {\n    return this.css\n  }\n\n  then (onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch (onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally (onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async () {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync () {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        this.visitSync(this.listeners.OnceExit, root)\n      }\n    }\n\n    return this.result\n  }\n\n  stringify () {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync (node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync (visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && !node.parent) return true\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot (plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError () {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError (error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      // istanbul ignore next\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync () {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            await visitor(root, this.helpers)\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors () {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick (stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\n","\n\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\nlet mozilla = require('source-map')\n\nclass MapGenerator {\n  constructor (stringify, root, opts) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n  }\n\n  isMap () {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous () {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      this.root.walk(node => {\n        if (node.source && node.source.input.map) {\n          let map = node.source.input.map\n          if (!this.previousMaps.includes(map)) {\n            this.previousMaps.push(map)\n          }\n        }\n      })\n    }\n\n    return this.previousMaps\n  }\n\n  isInline () {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent () {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation () {\n    if (this.mapOpts.annotation === false) return\n\n    let node\n    for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n      node = this.root.nodes[i]\n      if (node.type !== 'comment') continue\n      if (node.text.indexOf('# sourceMappingURL=') === 0) {\n        this.root.removeChild(i)\n      }\n    }\n  }\n\n  setSourcesContent () {\n    let already = {}\n    this.root.walk(node => {\n      if (node.source) {\n        let from = node.source.input.from\n        if (from && !already[from]) {\n          already[from] = true\n          this.map.setSourceContent(\n            this.toUrl(this.path(from)),\n            node.source.input.css\n          )\n        }\n      }\n    })\n  }\n\n  applyPrevMaps () {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new mozilla.SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation () {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64 (str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      // istanbul ignore next\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation () {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile () {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    }\n    if (this.opts.from) {\n      return this.path(this.opts.from)\n    }\n    return 'to.css'\n  }\n\n  generateMap () {\n    this.generateString()\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    }\n    return [this.css, this.map]\n  }\n\n  path (file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl (path) {\n    if (sep === '\\\\') {\n      // istanbul ignore next\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  sourcePath (node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.mapOpts.absolute) {\n      return pathToFileURL(node.source.input.from).toString()\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString () {\n    this.css = ''\n    this.map = new mozilla.SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        if (node.source && node.source.start) {\n          this.map.addMapping({\n            source: this.sourcePath(node),\n            generated: { line, column: column - 1 },\n            original: {\n              line: node.source.start.line,\n              column: node.source.start.column - 1\n            }\n          })\n        } else {\n          this.map.addMapping({\n            source: '<no source>',\n            original: { line: 1, column: 0 },\n            generated: { line, column: column - 1 }\n          })\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            this.map.addMapping({\n              source: this.sourcePath(node),\n              generated: { line, column: column - 2 },\n              original: {\n                line: node.source.end.line,\n                column: node.source.end.column - 1\n              }\n            })\n          } else {\n            this.map.addMapping({\n              source: '<no source>',\n              original: { line: 1, column: 0 },\n              generated: { line, column: column - 1 }\n            })\n          }\n        }\n      }\n    })\n  }\n\n  generate () {\n    this.clearAnnotation()\n\n    if (this.isMap()) {\n      return this.generateMap()\n    }\n\n    let result = ''\n    this.stringify(this.root, i => {\n      result += i\n    })\n    return [result]\n  }\n}\n\nmodule.exports = MapGenerator\n","\n\nlet printed = {}\n\nmodule.exports = function warnOnce (message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n","\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor (processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString () {\n    return this.css\n  }\n\n  warn (text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings () {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content () {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n","\n\nclass Warning {\n  constructor (text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let pos = opts.node.positionBy(opts)\n      this.line = pos.line\n      this.column = pos.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString () {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n","\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse (css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n","\n\nlet Declaration = require('./declaration')\nlet { isClean } = require('./symbols')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule\n\nfunction cleanSource (nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp (node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\n// istanbul ignore next\nfunction rebuild (node) {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  }\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      rebuild(child)\n    })\n  }\n}\n\nclass Container extends Node {\n  push (child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each (callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk (callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls (prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules (selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules (name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments (callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append (...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend (...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws (keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore (exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter (exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild (child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll () {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues (pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every (condition) {\n    return this.nodes.every(condition)\n  }\n\n  some (condition) {\n    return this.nodes.some(condition)\n  }\n\n  index (child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first () {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last () {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize (nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      // istanbul ignore next\n      if (typeof i.markDirty !== 'function') rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor () {\n    return {\n      set (node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get (node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator () {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n","\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n","\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nclass Parser {\n  constructor (input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer () {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse () {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment (token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule (token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other (start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      while (tokens.length) {\n        token = tokens[tokens.length - 1][0]\n        if (token !== 'space' && token !== 'comment') break\n        this.tokenizer.back(tokens.pop())\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule (tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl (tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n    node.source.end = this.getPosition(last[3] || last[2])\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n    let firstSpaces = this.spacesAndCommentsFromStart(tokens)\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n    this.raw(node, 'value', tokens)\n    if (hasWord) {\n      node.raws.between += firstSpaces\n    } else {\n      node.value = firstSpaces + node.value\n    }\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule (token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end (token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile () {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon (token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition (offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init (node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw (node, prop, tokens) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n    let pattern = /^([#.|])?(\\w)+/i\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n\n      if (type === 'comment' && node.type === 'rule') {\n        prev = tokens[i - 1]\n        next = tokens[i + 1]\n\n        if (\n          prev[0] !== 'space' &&\n          next[0] !== 'space' &&\n          pattern.test(prev[1]) &&\n          pattern.test(next[1])\n        ) {\n          value += token[1]\n        } else {\n          clean = false\n        }\n\n        continue\n      }\n\n      if (type === 'comment' || (type === 'space' && i === length - 1)) {\n        clean = false\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd (tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart (tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd (tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom (tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon (tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket (bracket) {\n    throw this.input.error('Unclosed bracket', bracket[2])\n  }\n\n  unknownWord (tokens) {\n    throw this.input.error('Unknown word', tokens[0][2])\n  }\n\n  unexpectedClose (token) {\n    throw this.input.error('Unexpected }', token[2])\n  }\n\n  unclosedBlock () {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon (token) {\n    throw this.input.error('Double colon', token[2])\n  }\n\n  unnamedAtrule (node, token) {\n    throw this.input.error('At-rule without name', token[2])\n  }\n\n  precheckMissedSemicolon (/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon (tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    throw this.input.error('Missed semicolon', token[2])\n  }\n}\n\nmodule.exports = Parser\n","\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append (...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend (...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n","\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild (child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize (child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult (opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n","\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors () {\n    return list.comma(this.selector)\n  }\n\n  set selectors (values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n","\n\nlet list = {\n  split (string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let quote = false\n    let escape = false\n\n    for (let letter of string) {\n      if (quote) {\n        if (escape) {\n          escape = false\n        } else if (letter === '\\\\') {\n          escape = true\n        } else if (letter === quote) {\n          quote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        quote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space (string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma (string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n","\n\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffset cache')\n\nclass Input {\n  constructor (css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (/^\\w+:\\/\\//.test(opts.from) || isAbsolute(opts.from)) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    let map = new PreviousMap(this.css, opts)\n    if (map.text) {\n      this.map = map\n      let file = map.consumer().file\n      if (!this.file && file) this.file = this.mapResolve(file)\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset (offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error (message, line, column, opts = {}) {\n    let result\n    if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n    let origin = this.origin(line, column)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.line,\n        origin.column,\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        line,\n        column,\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, source: this.css }\n    if (this.file) {\n      result.input.url = pathToFileURL(this.file).toString()\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin (line, column) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      result.file = fileURLToPath(fromUrl)\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve (file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from () {\n    return this.file || this.id\n  }\n\n  toJSON () {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n","\n\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\nlet mozilla = require('source-map')\n\nfunction fromBase64 (str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    // istanbul ignore next\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor (css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer () {\n    if (!this.consumerCache) {\n      this.consumerCache = new mozilla.SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent () {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith (string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL (sourceMapString) {\n    return sourceMapString\n      .match(/\\/\\*\\s*# sourceMappingURL=(.*)\\s*\\*\\//)[1]\n      .trim()\n  }\n\n  loadAnnotation (css) {\n    let annotations = css.match(/\\/\\*\\s*# sourceMappingURL=.*\\s*\\*\\//gm)\n\n    if (annotations && annotations.length > 0) {\n      // Locate the last sourceMappingURL to avoid picking up\n      // sourceMappingURLs from comments, strings, etc.\n      let lastAnnotation = annotations[annotations.length - 1]\n      if (lastAnnotation) {\n        this.annotation = this.getAnnotationURL(lastAnnotation)\n      }\n    }\n  }\n\n  decodeInline (text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile (path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap (file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof mozilla.SourceMapConsumer) {\n        return mozilla.SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof mozilla.SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap (map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n","\n\nlet LazyResult = require('./lazy-result')\nlet Root = require('./root')\n\nclass Processor {\n  constructor (plugins = []) {\n    this.version = '8.2.4'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use (plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process (css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      opts.parser === opts.stringifier &&\n      !opts.hideNothingWarning\n    ) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(\n            'You did not set any plugins, parser, or stringifier. ' +\n              'Right now, PostCSS does nothing. Pick plugins for your case ' +\n              'on https://www.postcss.parts/ and use them in postcss.config.js.'\n          )\n        }\n      }\n    }\n    return new LazyResult(this, css, opts)\n  }\n\n  normalize (plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\n","\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON (json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n"]}