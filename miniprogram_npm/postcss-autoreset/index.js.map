{"version":3,"sources":["index.js","lib/index.js","lib/rulesMatcher.js","lib/resetRules.js","lib/createResetRule.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA,ADGA,ADGA;AFOA,AIZA;AJaA,AIZA;AACA;AACA","file":"index.js","sourcesContent":["const { getRulesMatcher, getReset, createResetRule } = require(\"./lib\");\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\nmodule.exports = (opts = {}) => {\n  opts.rulesMatcher = opts.rulesMatcher || \"bem\";\n  opts.reset = opts.reset || \"initial\";\n  const rulesMatcher = getRulesMatcher(opts.rulesMatcher);\n  const reset = getReset(opts.reset);\n  return {\n    postcssPlugin: \"postcss-autoreset\",\n    prepare() {\n      const matchedSelectors = [];\n      return {\n        Rule(rule) {\n          const { selector } = rule;\n          if (/^(-(webkit|moz|ms|o)-)?keyframes$/.test(rule.parent.name)) {\n            return;\n          }\n          if (!contains(matchedSelectors, selector) && rulesMatcher(rule)) {\n            matchedSelectors.push(selector);\n          }\n        },\n        OnceExit(root) {\n          if (!matchedSelectors.length) {\n            return;\n          }\n          root.prepend(createResetRule(matchedSelectors, reset));\n        },\n      };\n    },\n  };\n};\nmodule.exports.postcss = true;\n","module.exports = {\n  getRulesMatcher: require(\"./rulesMatcher\"),\n  getReset: require(\"./resetRules\"),\n  createResetRule: require(\"./createResetRule\"),\n};\n","/**\n * Demo - https://regex101.com/r/AA4xaq/3\n */\nconst suitRegex = /^\\.(?:[a-z0-9]*-)?[A-Z](?:[a-zA-Z0-9]+)(?:-[a-zA-Z0-9]+)?$/;\n\nconst matchers = {\n  bem({ selector }) {\n    return !selector.match(/(--|:)/);\n  },\n\n  suit({ selector }) {\n    return selector.charAt(0) === \".\" && suitRegex.test(selector);\n  },\n};\n\nmodule.exports = function getRulesMatcher(value = \"bem\") {\n  if (typeof value === \"function\") {\n    return value;\n  }\n\n  switch (value) {\n    case \"suit\":\n      return matchers.suit;\n    case \"bem\":\n    default:\n      return matchers.bem;\n  }\n};\n","const resetSizes = {\n  margin: 0,\n  padding: 0,\n  border: 0,\n  fontSize: \"100%\",\n  font: \"inherit\",\n  verticalAlign: \"baseline\",\n};\n\nfunction isObject(variable) {\n  return variable !== null && typeof variable === \"object\";\n}\n\nmodule.exports = function getReset(value = \"initial\") {\n  if (isObject(value)) {\n    return value;\n  }\n  switch (value) {\n    case \"sizes\":\n      return resetSizes;\n    case \"initial\":\n    default:\n      return { all: \"initial\" };\n  }\n};\n","const postcss = require(\"postcss\");\nconst jsToCss = require(\"postcss-js/parser\");\nconst Input = require(\"postcss/lib/input\");\n\nconst source = {\n  input: new Input(\"\", { from: \"postcss-autoreset\" }),\n  start: { line: 1, column: 1 },\n  end: { line: 1, column: 1 },\n};\n\nfunction createResetRule(selectors, reset) {\n  const selector = selectors.map((s) => s.trim()).join(\",\\n\");\n  const resetRule = postcss.rule({\n    selector,\n    source,\n    raws: { between: \" \" },\n  });\n  const root = jsToCss(reset);\n  root.each((node) => {\n    node.source = resetRule.source;\n  });\n  resetRule.append(root);\n  return resetRule;\n}\n\nmodule.exports = createResetRule;\n"]}